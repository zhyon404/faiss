// WARNING: This file has automatically been generated on Fri, 04 Jan 2019 16:12:37 CST.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package faiss_go

/*
#cgo darwin LDFLAGS: -Lc_api -lfaiss_c
#cgo darwin LDFLAGS: -L.. -lfaiss
#cgo linux LDFLAGS: -Lc_api -lfaiss_c
#cgo linux LDFLAGS: -L.. -lfaiss
#cgo darwin LDFLAGS: -Wl,-undefined,dynamic_lookup
#cgo darwin LDFLAGS: -lblas -llapack
#cgo linux LDFLAGS: -L/usr/local/lib -lstdc++ -pthread -lcrypt -lm -fopenmp -lblas -llapack
#include "c_api/AutoTune_c.h"
#include "c_api/AuxIndexStructures_c.h"
#include "c_api/Clustering_c.h"
#include "c_api/Index_c.h"
#include "c_api/IndexFlat_c.h"
#include "c_api/IndexIVF_c.h"
#include "c_api/IndexLSH_c.h"
#include "c_api/MetaIndexes_c.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"sync"
	"unsafe"
)

// Ref returns a reference to C object as it is.
func (x *Faissparameterrange) Ref() *C.FaissParameterRange {
	if x == nil {
		return nil
	}
	return (*C.FaissParameterRange)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissparameterrange) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissparameterrangeRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissparameterrangeRef(ref unsafe.Pointer) *Faissparameterrange {
	return (*Faissparameterrange)(ref)
}

// NewFaissparameterrange allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissparameterrange() *Faissparameterrange {
	return (*Faissparameterrange)(allocFaissparameterrangeMemory(1))
}

// allocFaissparameterrangeMemory allocates memory for type C.FaissParameterRange in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissparameterrangeMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissparameterrangeValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissparameterrangeValue = unsafe.Sizeof([1]C.FaissParameterRange{})

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissparameterrange) PassRef() *C.FaissParameterRange {
	if x == nil {
		x = (*Faissparameterrange)(allocFaissparameterrangeMemory(1))
	}
	return (*C.FaissParameterRange)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissparameterspace) Ref() *C.FaissParameterSpace {
	if x == nil {
		return nil
	}
	return (*C.FaissParameterSpace)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissparameterspace) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissparameterspaceRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissparameterspaceRef(ref unsafe.Pointer) *Faissparameterspace {
	return (*Faissparameterspace)(ref)
}

// NewFaissparameterspace allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissparameterspace() *Faissparameterspace {
	return (*Faissparameterspace)(allocFaissparameterspaceMemory(1))
}

// allocFaissparameterspaceMemory allocates memory for type C.FaissParameterSpace in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissparameterspaceMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissparameterspaceValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissparameterspaceValue = unsafe.Sizeof([1]C.FaissParameterSpace{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissparameterspace) PassRef() *C.FaissParameterSpace {
	if x == nil {
		x = (*Faissparameterspace)(allocFaissparameterspaceMemory(1))
	}
	return (*C.FaissParameterSpace)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissrangesearchresult) Ref() *C.FaissRangeSearchResult {
	if x == nil {
		return nil
	}
	return (*C.FaissRangeSearchResult)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissrangesearchresult) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissrangesearchresultRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissrangesearchresultRef(ref unsafe.Pointer) *Faissrangesearchresult {
	return (*Faissrangesearchresult)(ref)
}

// NewFaissrangesearchresult allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissrangesearchresult() *Faissrangesearchresult {
	return (*Faissrangesearchresult)(allocFaissrangesearchresultMemory(1))
}

// allocFaissrangesearchresultMemory allocates memory for type C.FaissRangeSearchResult in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissrangesearchresultMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissrangesearchresultValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissrangesearchresultValue = unsafe.Sizeof([1]C.FaissRangeSearchResult{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissrangesearchresult) PassRef() *C.FaissRangeSearchResult {
	if x == nil {
		x = (*Faissrangesearchresult)(allocFaissrangesearchresultMemory(1))
	}
	return (*C.FaissRangeSearchResult)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissidselector) Ref() *C.FaissIDSelector {
	if x == nil {
		return nil
	}
	return (*C.FaissIDSelector)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissidselector) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissidselectorRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissidselectorRef(ref unsafe.Pointer) *Faissidselector {
	return (*Faissidselector)(ref)
}

// NewFaissidselector allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissidselector() *Faissidselector {
	return (*Faissidselector)(allocFaissidselectorMemory(1))
}

// allocFaissidselectorMemory allocates memory for type C.FaissIDSelector in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissidselectorMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissidselectorValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissidselectorValue = unsafe.Sizeof([1]C.FaissIDSelector{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissidselector) PassRef() *C.FaissIDSelector {
	if x == nil {
		x = (*Faissidselector)(allocFaissidselectorMemory(1))
	}
	return (*C.FaissIDSelector)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindex) Ref() *C.FaissIndex {
	if x == nil {
		return nil
	}
	return (*C.FaissIndex)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindex) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexRef(ref unsafe.Pointer) *Faissindex {
	return (*Faissindex)(ref)
}

// NewFaissindex allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindex() *Faissindex {
	return (*Faissindex)(allocFaissindexMemory(1))
}

// allocFaissindexMemory allocates memory for type C.FaissIndex in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexValue = unsafe.Sizeof([1]C.FaissIndex{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindex) PassRef() *C.FaissIndex {
	if x == nil {
		x = (*Faissindex)(allocFaissindexMemory(1))
	}
	return (*C.FaissIndex)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissidselectorrange) Ref() *C.FaissIDSelectorRange {
	if x == nil {
		return nil
	}
	return (*C.FaissIDSelectorRange)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissidselectorrange) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissidselectorrangeRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissidselectorrangeRef(ref unsafe.Pointer) *Faissidselectorrange {
	return (*Faissidselectorrange)(ref)
}

// NewFaissidselectorrange allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissidselectorrange() *Faissidselectorrange {
	return (*Faissidselectorrange)(allocFaissidselectorrangeMemory(1))
}

// allocFaissidselectorrangeMemory allocates memory for type C.FaissIDSelectorRange in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissidselectorrangeMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissidselectorrangeValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissidselectorrangeValue = unsafe.Sizeof([1]C.FaissIDSelectorRange{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissidselectorrange) PassRef() *C.FaissIDSelectorRange {
	if x == nil {
		x = (*Faissidselectorrange)(allocFaissidselectorrangeMemory(1))
	}
	return (*C.FaissIDSelectorRange)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissidselectorbatch) Ref() *C.FaissIDSelectorBatch {
	if x == nil {
		return nil
	}
	return (*C.FaissIDSelectorBatch)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissidselectorbatch) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissidselectorbatchRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissidselectorbatchRef(ref unsafe.Pointer) *Faissidselectorbatch {
	return (*Faissidselectorbatch)(ref)
}

// NewFaissidselectorbatch allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissidselectorbatch() *Faissidselectorbatch {
	return (*Faissidselectorbatch)(allocFaissidselectorbatchMemory(1))
}

// allocFaissidselectorbatchMemory allocates memory for type C.FaissIDSelectorBatch in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissidselectorbatchMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissidselectorbatchValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissidselectorbatchValue = unsafe.Sizeof([1]C.FaissIDSelectorBatch{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissidselectorbatch) PassRef() *C.FaissIDSelectorBatch {
	if x == nil {
		x = (*Faissidselectorbatch)(allocFaissidselectorbatchMemory(1))
	}
	return (*C.FaissIDSelectorBatch)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissbufferlist) Ref() *C.FaissBufferList {
	if x == nil {
		return nil
	}
	return (*C.FaissBufferList)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissbufferlist) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissbufferlistRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissbufferlistRef(ref unsafe.Pointer) *Faissbufferlist {
	return (*Faissbufferlist)(ref)
}

// NewFaissbufferlist allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissbufferlist() *Faissbufferlist {
	return (*Faissbufferlist)(allocFaissbufferlistMemory(1))
}

// allocFaissbufferlistMemory allocates memory for type C.FaissBufferList in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissbufferlistMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissbufferlistValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissbufferlistValue = unsafe.Sizeof([1]C.FaissBufferList{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissbufferlist) PassRef() *C.FaissBufferList {
	if x == nil {
		x = (*Faissbufferlist)(allocFaissbufferlistMemory(1))
	}
	return (*C.FaissBufferList)(unsafe.Pointer(x))
}

// allocFaissbufferMemory allocates memory for type C.FaissBuffer in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissbufferMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissbufferValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissbufferValue = unsafe.Sizeof([1]C.FaissBuffer{})

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Faissbuffer) Ref() *C.FaissBuffer {
	if x == nil {
		return nil
	}
	return x.refe3f43253
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Faissbuffer) Free() {
	if x != nil && x.allocse3f43253 != nil {
		x.allocse3f43253.(*cgoAllocMap).Free()
		x.refe3f43253 = nil
	}
}

// NewFaissbufferRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFaissbufferRef(ref unsafe.Pointer) *Faissbuffer {
	if ref == nil {
		return nil
	}
	obj := new(Faissbuffer)
	obj.refe3f43253 = (*C.FaissBuffer)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Faissbuffer) PassRef() (*C.FaissBuffer, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refe3f43253 != nil {
		return x.refe3f43253, nil
	}
	meme3f43253 := allocFaissbufferMemory(1)
	refe3f43253 := (*C.FaissBuffer)(meme3f43253)
	allocse3f43253 := new(cgoAllocMap)
	allocse3f43253.Add(meme3f43253)

	var cids_allocs *cgoAllocMap
	refe3f43253.ids, cids_allocs = (*C.idx_t)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&x.Ids)).Data)), cgoAllocsUnknown
	allocse3f43253.Borrow(cids_allocs)

	var cdis_allocs *cgoAllocMap
	refe3f43253.dis, cdis_allocs = (*C.float)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&x.Dis)).Data)), cgoAllocsUnknown
	allocse3f43253.Borrow(cdis_allocs)

	x.refe3f43253 = refe3f43253
	x.allocse3f43253 = allocse3f43253
	return refe3f43253, allocse3f43253

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Faissbuffer) PassValue() (C.FaissBuffer, *cgoAllocMap) {
	if x.refe3f43253 != nil {
		return *x.refe3f43253, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Faissbuffer) Deref() {
	if x.refe3f43253 == nil {
		return
	}
	hxfc4425b := (*sliceHeader)(unsafe.Pointer(&x.Ids))
	hxfc4425b.Data = unsafe.Pointer(x.refe3f43253.ids)
	hxfc4425b.Cap = 0x7fffffff
	// hxfc4425b.Len = ?

	hxf95e7c8 := (*sliceHeader)(unsafe.Pointer(&x.Dis))
	hxf95e7c8.Data = unsafe.Pointer(x.refe3f43253.dis)
	hxf95e7c8.Cap = 0x7fffffff
	// hxf95e7c8.Len = ?

}

// Ref returns a reference to C object as it is.
func (x *Faissrangesearchpartialresult) Ref() *C.FaissRangeSearchPartialResult {
	if x == nil {
		return nil
	}
	return (*C.FaissRangeSearchPartialResult)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissrangesearchpartialresult) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissrangesearchpartialresultRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissrangesearchpartialresultRef(ref unsafe.Pointer) *Faissrangesearchpartialresult {
	return (*Faissrangesearchpartialresult)(ref)
}

// NewFaissrangesearchpartialresult allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissrangesearchpartialresult() *Faissrangesearchpartialresult {
	return (*Faissrangesearchpartialresult)(allocFaissrangesearchpartialresultMemory(1))
}

// allocFaissrangesearchpartialresultMemory allocates memory for type C.FaissRangeSearchPartialResult in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissrangesearchpartialresultMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissrangesearchpartialresultValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissrangesearchpartialresultValue = unsafe.Sizeof([1]C.FaissRangeSearchPartialResult{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissrangesearchpartialresult) PassRef() *C.FaissRangeSearchPartialResult {
	if x == nil {
		x = (*Faissrangesearchpartialresult)(allocFaissrangesearchpartialresultMemory(1))
	}
	return (*C.FaissRangeSearchPartialResult)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissqueryresult) Ref() *C.FaissQueryResult {
	if x == nil {
		return nil
	}
	return (*C.FaissQueryResult)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissqueryresult) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissqueryresultRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissqueryresultRef(ref unsafe.Pointer) *Faissqueryresult {
	return (*Faissqueryresult)(ref)
}

// NewFaissqueryresult allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissqueryresult() *Faissqueryresult {
	return (*Faissqueryresult)(allocFaissqueryresultMemory(1))
}

// allocFaissqueryresultMemory allocates memory for type C.FaissQueryResult in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissqueryresultMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissqueryresultValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissqueryresultValue = unsafe.Sizeof([1]C.FaissQueryResult{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissqueryresult) PassRef() *C.FaissQueryResult {
	if x == nil {
		x = (*Faissqueryresult)(allocFaissqueryresultMemory(1))
	}
	return (*C.FaissQueryResult)(unsafe.Pointer(x))
}

// allocFaissclusteringparametersMemory allocates memory for type C.FaissClusteringParameters in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissclusteringparametersMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissclusteringparametersValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissclusteringparametersValue = unsafe.Sizeof([1]C.FaissClusteringParameters{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Faissclusteringparameters) Ref() *C.FaissClusteringParameters {
	if x == nil {
		return nil
	}
	return x.ref9c9731c3
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Faissclusteringparameters) Free() {
	if x != nil && x.allocs9c9731c3 != nil {
		x.allocs9c9731c3.(*cgoAllocMap).Free()
		x.ref9c9731c3 = nil
	}
}

// NewFaissclusteringparametersRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFaissclusteringparametersRef(ref unsafe.Pointer) *Faissclusteringparameters {
	if ref == nil {
		return nil
	}
	obj := new(Faissclusteringparameters)
	obj.ref9c9731c3 = (*C.FaissClusteringParameters)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Faissclusteringparameters) PassRef() (*C.FaissClusteringParameters, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.ref9c9731c3 != nil {
		return x.ref9c9731c3, nil
	}
	mem9c9731c3 := allocFaissclusteringparametersMemory(1)
	ref9c9731c3 := (*C.FaissClusteringParameters)(mem9c9731c3)
	allocs9c9731c3 := new(cgoAllocMap)
	allocs9c9731c3.Add(mem9c9731c3)

	var cniter_allocs *cgoAllocMap
	ref9c9731c3.niter, cniter_allocs = (C.int)(x.Niter), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cniter_allocs)

	var cnredo_allocs *cgoAllocMap
	ref9c9731c3.nredo, cnredo_allocs = (C.int)(x.Nredo), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cnredo_allocs)

	var cverbose_allocs *cgoAllocMap
	ref9c9731c3.verbose, cverbose_allocs = (C.int)(x.Verbose), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cverbose_allocs)

	var cspherical_allocs *cgoAllocMap
	ref9c9731c3.spherical, cspherical_allocs = (C.int)(x.Spherical), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cspherical_allocs)

	var cupdate_index_allocs *cgoAllocMap
	ref9c9731c3.update_index, cupdate_index_allocs = (C.int)(x.UpdateIndex), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cupdate_index_allocs)

	var cfrozen_centroids_allocs *cgoAllocMap
	ref9c9731c3.frozen_centroids, cfrozen_centroids_allocs = (C.int)(x.FrozenCentroids), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cfrozen_centroids_allocs)

	var cmin_points_per_centroid_allocs *cgoAllocMap
	ref9c9731c3.min_points_per_centroid, cmin_points_per_centroid_allocs = (C.int)(x.MinPointsPerCentroid), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cmin_points_per_centroid_allocs)

	var cmax_points_per_centroid_allocs *cgoAllocMap
	ref9c9731c3.max_points_per_centroid, cmax_points_per_centroid_allocs = (C.int)(x.MaxPointsPerCentroid), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cmax_points_per_centroid_allocs)

	var cseed_allocs *cgoAllocMap
	ref9c9731c3.seed, cseed_allocs = (C.int)(x.Seed), cgoAllocsUnknown
	allocs9c9731c3.Borrow(cseed_allocs)

	x.ref9c9731c3 = ref9c9731c3
	x.allocs9c9731c3 = allocs9c9731c3
	return ref9c9731c3, allocs9c9731c3

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Faissclusteringparameters) PassValue() (C.FaissClusteringParameters, *cgoAllocMap) {
	if x.ref9c9731c3 != nil {
		return *x.ref9c9731c3, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Faissclusteringparameters) Deref() {
	if x.ref9c9731c3 == nil {
		return
	}
	x.Niter = (int32)(x.ref9c9731c3.niter)
	x.Nredo = (int32)(x.ref9c9731c3.nredo)
	x.Verbose = (int32)(x.ref9c9731c3.verbose)
	x.Spherical = (int32)(x.ref9c9731c3.spherical)
	x.UpdateIndex = (int32)(x.ref9c9731c3.update_index)
	x.FrozenCentroids = (int32)(x.ref9c9731c3.frozen_centroids)
	x.MinPointsPerCentroid = (int32)(x.ref9c9731c3.min_points_per_centroid)
	x.MaxPointsPerCentroid = (int32)(x.ref9c9731c3.max_points_per_centroid)
	x.Seed = (int32)(x.ref9c9731c3.seed)
}

// Ref returns a reference to C object as it is.
func (x *Faissclustering) Ref() *C.FaissClustering {
	if x == nil {
		return nil
	}
	return (*C.FaissClustering)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissclustering) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissclusteringRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissclusteringRef(ref unsafe.Pointer) *Faissclustering {
	return (*Faissclustering)(ref)
}

// NewFaissclustering allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissclustering() *Faissclustering {
	return (*Faissclustering)(allocFaissclusteringMemory(1))
}

// allocFaissclusteringMemory allocates memory for type C.FaissClustering in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissclusteringMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissclusteringValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissclusteringValue = unsafe.Sizeof([1]C.FaissClustering{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissclustering) PassRef() *C.FaissClustering {
	if x == nil {
		x = (*Faissclustering)(allocFaissclusteringMemory(1))
	}
	return (*C.FaissClustering)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexflat) Ref() *C.FaissIndexFlat {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlat)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexflat) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexflatRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexflatRef(ref unsafe.Pointer) *Faissindexflat {
	return (*Faissindexflat)(ref)
}

// NewFaissindexflat allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexflat() *Faissindexflat {
	return (*Faissindexflat)(allocFaissindexflatMemory(1))
}

// allocFaissindexflatMemory allocates memory for type C.FaissIndexFlat in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexflatMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexflatValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexflatValue = unsafe.Sizeof([1]C.FaissIndexFlat{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexflat) PassRef() *C.FaissIndexFlat {
	if x == nil {
		x = (*Faissindexflat)(allocFaissindexflatMemory(1))
	}
	return (*C.FaissIndexFlat)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexflatip) Ref() *C.FaissIndexFlatIP {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlatIP)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexflatip) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexflatipRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexflatipRef(ref unsafe.Pointer) *Faissindexflatip {
	return (*Faissindexflatip)(ref)
}

// NewFaissindexflatip allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexflatip() *Faissindexflatip {
	return (*Faissindexflatip)(allocFaissindexflatipMemory(1))
}

// allocFaissindexflatipMemory allocates memory for type C.FaissIndexFlatIP in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexflatipMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexflatipValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexflatipValue = unsafe.Sizeof([1]C.FaissIndexFlatIP{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexflatip) PassRef() *C.FaissIndexFlatIP {
	if x == nil {
		x = (*Faissindexflatip)(allocFaissindexflatipMemory(1))
	}
	return (*C.FaissIndexFlatIP)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexflatl2) Ref() *C.FaissIndexFlatL2 {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlatL2)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexflatl2) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexflatl2Ref converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexflatl2Ref(ref unsafe.Pointer) *Faissindexflatl2 {
	return (*Faissindexflatl2)(ref)
}

// NewFaissindexflatl2 allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexflatl2() *Faissindexflatl2 {
	return (*Faissindexflatl2)(allocFaissindexflatl2Memory(1))
}

// allocFaissindexflatl2Memory allocates memory for type C.FaissIndexFlatL2 in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexflatl2Memory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexflatl2Value))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexflatl2Value = unsafe.Sizeof([1]C.FaissIndexFlatL2{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexflatl2) PassRef() *C.FaissIndexFlatL2 {
	if x == nil {
		x = (*Faissindexflatl2)(allocFaissindexflatl2Memory(1))
	}
	return (*C.FaissIndexFlatL2)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexflatl2baseshift) Ref() *C.FaissIndexFlatL2BaseShift {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlatL2BaseShift)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexflatl2baseshift) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexflatl2baseshiftRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexflatl2baseshiftRef(ref unsafe.Pointer) *Faissindexflatl2baseshift {
	return (*Faissindexflatl2baseshift)(ref)
}

// NewFaissindexflatl2baseshift allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexflatl2baseshift() *Faissindexflatl2baseshift {
	return (*Faissindexflatl2baseshift)(allocFaissindexflatl2baseshiftMemory(1))
}

// allocFaissindexflatl2baseshiftMemory allocates memory for type C.FaissIndexFlatL2BaseShift in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexflatl2baseshiftMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexflatl2baseshiftValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexflatl2baseshiftValue = unsafe.Sizeof([1]C.FaissIndexFlatL2BaseShift{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexflatl2baseshift) PassRef() *C.FaissIndexFlatL2BaseShift {
	if x == nil {
		x = (*Faissindexflatl2baseshift)(allocFaissindexflatl2baseshiftMemory(1))
	}
	return (*C.FaissIndexFlatL2BaseShift)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexrefineflat) Ref() *C.FaissIndexRefineFlat {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexRefineFlat)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexrefineflat) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexrefineflatRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexrefineflatRef(ref unsafe.Pointer) *Faissindexrefineflat {
	return (*Faissindexrefineflat)(ref)
}

// NewFaissindexrefineflat allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexrefineflat() *Faissindexrefineflat {
	return (*Faissindexrefineflat)(allocFaissindexrefineflatMemory(1))
}

// allocFaissindexrefineflatMemory allocates memory for type C.FaissIndexRefineFlat in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexrefineflatMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexrefineflatValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexrefineflatValue = unsafe.Sizeof([1]C.FaissIndexRefineFlat{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexrefineflat) PassRef() *C.FaissIndexRefineFlat {
	if x == nil {
		x = (*Faissindexrefineflat)(allocFaissindexrefineflatMemory(1))
	}
	return (*C.FaissIndexRefineFlat)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexflat1d) Ref() *C.FaissIndexFlat1D {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexFlat1D)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexflat1d) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexflat1dRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexflat1dRef(ref unsafe.Pointer) *Faissindexflat1d {
	return (*Faissindexflat1d)(ref)
}

// NewFaissindexflat1d allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexflat1d() *Faissindexflat1d {
	return (*Faissindexflat1d)(allocFaissindexflat1dMemory(1))
}

// allocFaissindexflat1dMemory allocates memory for type C.FaissIndexFlat1D in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexflat1dMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexflat1dValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexflat1dValue = unsafe.Sizeof([1]C.FaissIndexFlat1D{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexflat1d) PassRef() *C.FaissIndexFlat1D {
	if x == nil {
		x = (*Faissindexflat1d)(allocFaissindexflat1dMemory(1))
	}
	return (*C.FaissIndexFlat1D)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexivf) Ref() *C.FaissIndexIVF {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIVF)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexivf) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexivfRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexivfRef(ref unsafe.Pointer) *Faissindexivf {
	return (*Faissindexivf)(ref)
}

// NewFaissindexivf allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexivf() *Faissindexivf {
	return (*Faissindexivf)(allocFaissindexivfMemory(1))
}

// allocFaissindexivfMemory allocates memory for type C.FaissIndexIVF in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexivfMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexivfValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexivfValue = unsafe.Sizeof([1]C.FaissIndexIVF{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexivf) PassRef() *C.FaissIndexIVF {
	if x == nil {
		x = (*Faissindexivf)(allocFaissindexivfMemory(1))
	}
	return (*C.FaissIndexIVF)(unsafe.Pointer(x))
}

// allocFaissindexivfstatsMemory allocates memory for type C.FaissIndexIVFStats in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexivfstatsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexivfstatsValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexivfstatsValue = unsafe.Sizeof([1]C.FaissIndexIVFStats{})

// Ref returns the underlying reference to C object or nil if struct is nil.
func (x *Faissindexivfstats) Ref() *C.FaissIndexIVFStats {
	if x == nil {
		return nil
	}
	return x.refda0d0668
}

// Free invokes alloc map's free mechanism that cleanups any allocated memory using C free.
// Does nothing if struct is nil or has no allocation map.
func (x *Faissindexivfstats) Free() {
	if x != nil && x.allocsda0d0668 != nil {
		x.allocsda0d0668.(*cgoAllocMap).Free()
		x.refda0d0668 = nil
	}
}

// NewFaissindexivfstatsRef creates a new wrapper struct with underlying reference set to the original C object.
// Returns nil if the provided pointer to C object is nil too.
func NewFaissindexivfstatsRef(ref unsafe.Pointer) *Faissindexivfstats {
	if ref == nil {
		return nil
	}
	obj := new(Faissindexivfstats)
	obj.refda0d0668 = (*C.FaissIndexIVFStats)(unsafe.Pointer(ref))
	return obj
}

// PassRef returns the underlying C object, otherwise it will allocate one and set its values
// from this wrapping struct, counting allocations into an allocation map.
func (x *Faissindexivfstats) PassRef() (*C.FaissIndexIVFStats, *cgoAllocMap) {
	if x == nil {
		return nil, nil
	} else if x.refda0d0668 != nil {
		return x.refda0d0668, nil
	}
	memda0d0668 := allocFaissindexivfstatsMemory(1)
	refda0d0668 := (*C.FaissIndexIVFStats)(memda0d0668)
	allocsda0d0668 := new(cgoAllocMap)
	allocsda0d0668.Add(memda0d0668)

	var cnq_allocs *cgoAllocMap
	refda0d0668.nq, cnq_allocs = (C.size_t)(x.Nq), cgoAllocsUnknown
	allocsda0d0668.Borrow(cnq_allocs)

	var cnlist_allocs *cgoAllocMap
	refda0d0668.nlist, cnlist_allocs = (C.size_t)(x.Nlist), cgoAllocsUnknown
	allocsda0d0668.Borrow(cnlist_allocs)

	var cndis_allocs *cgoAllocMap
	refda0d0668.ndis, cndis_allocs = (C.size_t)(x.Ndis), cgoAllocsUnknown
	allocsda0d0668.Borrow(cndis_allocs)

	x.refda0d0668 = refda0d0668
	x.allocsda0d0668 = allocsda0d0668
	return refda0d0668, allocsda0d0668

}

// PassValue does the same as PassRef except that it will try to dereference the returned pointer.
func (x Faissindexivfstats) PassValue() (C.FaissIndexIVFStats, *cgoAllocMap) {
	if x.refda0d0668 != nil {
		return *x.refda0d0668, nil
	}
	ref, allocs := x.PassRef()
	return *ref, allocs
}

// Deref uses the underlying reference to C object and fills the wrapping struct with values.
// Do not forget to call this method whether you get a struct for C object and want to read its values.
func (x *Faissindexivfstats) Deref() {
	if x.refda0d0668 == nil {
		return
	}
	x.Nq = (uint)(x.refda0d0668.nq)
	x.Nlist = (uint)(x.refda0d0668.nlist)
	x.Ndis = (uint)(x.refda0d0668.ndis)
}

// Ref returns a reference to C object as it is.
func (x *Faissindexivfflat) Ref() *C.FaissIndexIVFFlat {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIVFFlat)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexivfflat) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexivfflatRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexivfflatRef(ref unsafe.Pointer) *Faissindexivfflat {
	return (*Faissindexivfflat)(ref)
}

// NewFaissindexivfflat allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexivfflat() *Faissindexivfflat {
	return (*Faissindexivfflat)(allocFaissindexivfflatMemory(1))
}

// allocFaissindexivfflatMemory allocates memory for type C.FaissIndexIVFFlat in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexivfflatMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexivfflatValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexivfflatValue = unsafe.Sizeof([1]C.FaissIndexIVFFlat{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexivfflat) PassRef() *C.FaissIndexIVFFlat {
	if x == nil {
		x = (*Faissindexivfflat)(allocFaissindexivfflatMemory(1))
	}
	return (*C.FaissIndexIVFFlat)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexlsh) Ref() *C.FaissIndexLSH {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexLSH)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexlsh) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexlshRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexlshRef(ref unsafe.Pointer) *Faissindexlsh {
	return (*Faissindexlsh)(ref)
}

// NewFaissindexlsh allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexlsh() *Faissindexlsh {
	return (*Faissindexlsh)(allocFaissindexlshMemory(1))
}

// allocFaissindexlshMemory allocates memory for type C.FaissIndexLSH in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexlshMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexlshValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexlshValue = unsafe.Sizeof([1]C.FaissIndexLSH{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexlsh) PassRef() *C.FaissIndexLSH {
	if x == nil {
		x = (*Faissindexlsh)(allocFaissindexlshMemory(1))
	}
	return (*C.FaissIndexLSH)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexidmap) Ref() *C.FaissIndexIDMap {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIDMap)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexidmap) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexidmapRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexidmapRef(ref unsafe.Pointer) *Faissindexidmap {
	return (*Faissindexidmap)(ref)
}

// NewFaissindexidmap allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexidmap() *Faissindexidmap {
	return (*Faissindexidmap)(allocFaissindexidmapMemory(1))
}

// allocFaissindexidmapMemory allocates memory for type C.FaissIndexIDMap in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexidmapMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexidmapValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexidmapValue = unsafe.Sizeof([1]C.FaissIndexIDMap{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexidmap) PassRef() *C.FaissIndexIDMap {
	if x == nil {
		x = (*Faissindexidmap)(allocFaissindexidmapMemory(1))
	}
	return (*C.FaissIndexIDMap)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexidmap2) Ref() *C.FaissIndexIDMap2 {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexIDMap2)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexidmap2) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexidmap2Ref converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexidmap2Ref(ref unsafe.Pointer) *Faissindexidmap2 {
	return (*Faissindexidmap2)(ref)
}

// NewFaissindexidmap2 allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexidmap2() *Faissindexidmap2 {
	return (*Faissindexidmap2)(allocFaissindexidmap2Memory(1))
}

// allocFaissindexidmap2Memory allocates memory for type C.FaissIndexIDMap2 in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexidmap2Memory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexidmap2Value))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexidmap2Value = unsafe.Sizeof([1]C.FaissIndexIDMap2{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexidmap2) PassRef() *C.FaissIndexIDMap2 {
	if x == nil {
		x = (*Faissindexidmap2)(allocFaissindexidmap2Memory(1))
	}
	return (*C.FaissIndexIDMap2)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *Faissindexshards) Ref() *C.FaissIndexShards {
	if x == nil {
		return nil
	}
	return (*C.FaissIndexShards)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *Faissindexshards) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewFaissindexshardsRef converts the C object reference into a raw struct reference without wrapping.
func NewFaissindexshardsRef(ref unsafe.Pointer) *Faissindexshards {
	return (*Faissindexshards)(ref)
}

// NewFaissindexshards allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewFaissindexshards() *Faissindexshards {
	return (*Faissindexshards)(allocFaissindexshardsMemory(1))
}

// allocFaissindexshardsMemory allocates memory for type C.FaissIndexShards in C.
// The caller is responsible for freeing the this memory via C.free.
func allocFaissindexshardsMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfFaissindexshardsValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfFaissindexshardsValue = unsafe.Sizeof([1]C.FaissIndexShards{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *Faissindexshards) PassRef() *C.FaissIndexShards {
	if x == nil {
		x = (*Faissindexshards)(allocFaissindexshardsMemory(1))
	}
	return (*C.FaissIndexShards)(unsafe.Pointer(x))
}

// unpackPCharString represents the data from Go string as *C.char and avoids copying.
func unpackPCharString(str string) (*C.char, *cgoAllocMap) {
	h := (*stringHeader)(unsafe.Pointer(&str))
	return (*C.char)(h.Data), cgoAllocsUnknown
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// packPCharString creates a Go string backed by *C.char and avoids copying.
func packPCharString(p *C.char) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.char)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}
